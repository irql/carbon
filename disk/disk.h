#pragma once

#define DISK_FLAG_PARTITION_STYLE_MBR		0x00000001L
#define DISK_FLAG_PARTITION_STYLE_GPT		0x00000002L
#define DISK_FLAG_PARTITION_STYLE_RAW		0x00000004L

#define DISK_FLAG_CONTROLLER_IDE			0x00000010L
#define DISK_FLAG_CONTROLLER_AHCI			0x00000020L
#define DISK_FLAG_CONTROLLER_NVME			0x00000040L

#define DISK_FLAG_INTERFACE_SCSI			0x00000100L
#define DISK_FLAG_INTERFACE_ATA				0x00000200L
#define DISK_FLAG_INTERFACE_ATAPI			0x00000400L

//
//	These flags are compatibile with DISK_FLAGS
//	and should be used if Flags & DISK_FLAG_PARTITION_STYLE_RAW
//

#define PARTITION_FLAG_FILE_SYSTEM_FAT32	0x00001000L
#define PARTITION_FLAG_FILE_SYSTEM_NTFS		0x00002000L
#define PARTITION_FLAG_FILE_SYSTEM_UNKNOWN	0x00004000L

#define PARTITION_FLAG_ACTIVE				0x10000000L

typedef struct _DISK_OBJECT *PDISK_OBJECT;

typedef NTSTATUS ACCESS_ROUTINE(
	__in PVOID Access,
	__in ULONG64 LogicalBlockAddress,
	__in PVOID Buffer,
	__in ULONG Length
	);

typedef ACCESS_ROUTINE *PACCESS_ROUTINE;

typedef struct _ACCESS_BLOCK {
	PACCESS_ROUTINE Read;
	PACCESS_ROUTINE Write;

} ACCESS_BLOCK, *PACCESS_BLOCK;

typedef NTSTATUS FS_ACCESS_ROUTINE(
	__in PVOID Access,
	__in PFILE_OBJECT FileObject,
	__in PIO_STATUS_BLOCK UserIosb
	);

typedef FS_ACCESS_ROUTINE *PFS_ACCESS_ROUTINE;

typedef struct _FS_ACCESS_BLOCK {
	PFS_ACCESS_ROUTINE Read;
	PFS_ACCESS_ROUTINE Write;

} FS_ACCESS_BLOCK, *PFS_ACCESS_BLOCK;

typedef struct _DISK_GEOMETRY {
	ULONG SectorSize;

	ULONG Cylinders;
	ULONG Heads;
	ULONG SectorsPerTrack;
} DISK_GEOMETRY, *PDISK_GEOMETRY;

typedef struct _DISK_OBJECT {
	ULONG32 Identifier;
	ULONG32 Flags;

	LIST_ENTRY DiskLinks;
	PLIST_ENTRY PartitionLinks;
	ULONG32 PartitionCount;

	DISK_GEOMETRY Geometry;

	PVOID ControllerData;
	PVOID BootSector;
	NTSTATUS BootStatus;

	ACCESS_BLOCK AccessBlock;
	FS_ACCESS_BLOCK FileSystem;
} DISK_OBJECT, *PDISK_OBJECT;

typedef struct _PARTITION_OBJECT {
	ULONG32 Identifier;
	ULONG32 Flags;
	ULONG64 StartLogicalBlockAddress;
	ULONG64 SectorCount;
	LIST_ENTRY PartitionLinks;

	PVOID BootSector;
	NTSTATUS BootStatus;

	PDISK_OBJECT Disk;
	ACCESS_BLOCK AccessBlock;
	FS_ACCESS_BLOCK FileSystem;
} PARTITION_OBJECT, *PPARTITION_OBJECT;

EXTERN PDISK_OBJECT DiskHead;

PDISK_OBJECT
FsDiskCreateObject(

	);

PPARTITION_OBJECT
FsPartitionCreateObject(
	__in PDISK_OBJECT Disk
	);

PDISK_OBJECT
FsGetDiskById(
	__in ULONG Id
	);

PPARTITION_OBJECT
FsGetPartitionById(
	__in PDISK_OBJECT Disk,
	__in ULONG Id
	);

#include "fs.h"
